{"ast":null,"code":"import { map } from 'rxjs';\nimport { SystemType } from '../interfaces/car-card.interface';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nexport class CarService {\n  constructor(apiService) {\n    this.apiService = apiService;\n  }\n  getAllCars(limit) {\n    let options;\n    if (limit) {\n      options = {\n        params: {\n          limit\n        }\n      };\n    }\n    return this.apiService.get(`cars`, options).pipe(map(res => res.map((item, index) => {\n      item = {\n        ...item,\n        review: 4.6,\n        price: 2100,\n        isAirConditioning: true,\n        doorsNumber: 4,\n        passangersNumber: 2,\n        reviewCount: 1345\n      };\n      if (index % 2) {\n        item.transmission = SystemType.Manual;\n        item.image = '../../assets/imges/card/car1.png';\n      } else {\n        item.transmission = SystemType.Auto;\n        item.image = '../../assets/imges/card/car3.png';\n      }\n      return item;\n    })));\n  }\n  getCarById(id) {\n    return this.apiService.get(`cars/${id}`).pipe(map(item => {\n      item = {\n        ...item,\n        review: 4.6,\n        price: 2100,\n        isAirConditioning: true,\n        doorsNumber: 4,\n        passangersNumber: 2,\n        reviewCount: 1345\n      };\n      if (Number(item.id) % 2) {\n        item.transmission = SystemType.Manual;\n        item.image = '../../assets/imges/card/car1.png';\n      } else {\n        item.transmission = SystemType.Auto;\n        item.image = '../../assets/imges/card/car3.png';\n      }\n      return item;\n    }));\n  }\n  static #_ = this.ɵfac = function CarService_Factory(t) {\n    return new (t || CarService)(i0.ɵɵinject(i1.ApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CarService,\n    factory: CarService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","SystemType","CarService","constructor","apiService","getAllCars","limit","options","params","get","pipe","res","item","index","review","price","isAirConditioning","doorsNumber","passangersNumber","reviewCount","transmission","Manual","image","Auto","getCarById","id","Number","_","i0","ɵɵinject","i1","ApiService","_2","factory","ɵfac","providedIn"],"sources":["C:\\new-upskilling-3\\src\\app\\services\\car.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, map, mergeMap, tap } from 'rxjs';\r\nimport { ApiService } from './api.service';\r\nimport { CarCard, SystemType } from '../interfaces/car-card.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CarService {\r\n  constructor(private apiService: ApiService) {}\r\n  getAllCars(limit?:number): Observable<CarCard[]> {\r\n    let options \r\n    if(limit) {\r\n     options = {\r\n      params : {\r\n        limit \r\n      }\r\n     }\r\n    }\r\n    return this.apiService.get(`cars`,options).pipe(\r\n      map((res) =>\r\n        res.map((item: CarCard, index: number) => {\r\n          \r\n          item = {\r\n            ...item,\r\n            review: 4.6,\r\n            price: 2100,\r\n            isAirConditioning: true,\r\n            doorsNumber: 4,\r\n            passangersNumber: 2,\r\n            reviewCount: 1345,\r\n          };\r\n          if (index % 2) {\r\n            item.transmission = SystemType.Manual;\r\n            item.image =  '../../assets/imges/card/car1.png'\r\n\r\n          } else {\r\n            item.transmission = SystemType.Auto;\r\n            item.image =  '../../assets/imges/card/car3.png'\r\n\r\n          }\r\n          return item;\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  getCarById(id: string): Observable<CarCard> {\r\n    return this.apiService.get(`cars/${id}`).pipe(\r\n      map((item) =>{\r\n        \r\n        item = {\r\n          ...item,\r\n          review: 4.6,\r\n          price: 2100,\r\n          isAirConditioning: true,\r\n          doorsNumber: 4,\r\n          passangersNumber: 2,\r\n          reviewCount: 1345,\r\n        }\r\n        if (Number(item.id) % 2) {\r\n          item.transmission = SystemType.Manual;\r\n          item.image =  '../../assets/imges/card/car1.png'\r\n\r\n        } else {\r\n          item.transmission = SystemType.Auto;\r\n          item.image =  '../../assets/imges/card/car3.png'\r\n\r\n        }\r\n        return item;\r\n      \r\n    \r\n      }\r\n    ));\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,GAAG,QAAuB,MAAM;AAErD,SAAkBC,UAAU,QAAQ,kCAAkC;;;AAKtE,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAC7CC,UAAUA,CAACC,KAAa;IACtB,IAAIC,OAAO;IACX,IAAGD,KAAK,EAAE;MACTC,OAAO,GAAG;QACTC,MAAM,EAAG;UACPF;;OAEF;;IAEF,OAAO,IAAI,CAACF,UAAU,CAACK,GAAG,CAAC,MAAM,EAACF,OAAO,CAAC,CAACG,IAAI,CAC7CV,GAAG,CAAEW,GAAG,IACNA,GAAG,CAACX,GAAG,CAAC,CAACY,IAAa,EAAEC,KAAa,KAAI;MAEvCD,IAAI,GAAG;QACL,GAAGA,IAAI;QACPE,MAAM,EAAE,GAAG;QACXC,KAAK,EAAE,IAAI;QACXC,iBAAiB,EAAE,IAAI;QACvBC,WAAW,EAAE,CAAC;QACdC,gBAAgB,EAAE,CAAC;QACnBC,WAAW,EAAE;OACd;MACD,IAAIN,KAAK,GAAG,CAAC,EAAE;QACbD,IAAI,CAACQ,YAAY,GAAGnB,UAAU,CAACoB,MAAM;QACrCT,IAAI,CAACU,KAAK,GAAI,kCAAkC;OAEjD,MAAM;QACLV,IAAI,CAACQ,YAAY,GAAGnB,UAAU,CAACsB,IAAI;QACnCX,IAAI,CAACU,KAAK,GAAI,kCAAkC;;MAGlD,OAAOV,IAAI;IACb,CAAC,CAAC,CACH,CACF;EACH;EAEAY,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACrB,UAAU,CAACK,GAAG,CAAC,QAAQgB,EAAE,EAAE,CAAC,CAACf,IAAI,CAC3CV,GAAG,CAAEY,IAAI,IAAI;MAEXA,IAAI,GAAG;QACL,GAAGA,IAAI;QACPE,MAAM,EAAE,GAAG;QACXC,KAAK,EAAE,IAAI;QACXC,iBAAiB,EAAE,IAAI;QACvBC,WAAW,EAAE,CAAC;QACdC,gBAAgB,EAAE,CAAC;QACnBC,WAAW,EAAE;OACd;MACD,IAAIO,MAAM,CAACd,IAAI,CAACa,EAAE,CAAC,GAAG,CAAC,EAAE;QACvBb,IAAI,CAACQ,YAAY,GAAGnB,UAAU,CAACoB,MAAM;QACrCT,IAAI,CAACU,KAAK,GAAI,kCAAkC;OAEjD,MAAM;QACLV,IAAI,CAACQ,YAAY,GAAGnB,UAAU,CAACsB,IAAI;QACnCX,IAAI,CAACU,KAAK,GAAI,kCAAkC;;MAGlD,OAAOV,IAAI;IAGb,CAAC,CACF,CAAC;EACJ;EAAC,QAAAe,CAAA,G;qBAlEUzB,UAAU,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAV9B,UAAU;IAAA+B,OAAA,EAAV/B,UAAU,CAAAgC,IAAA;IAAAC,UAAA,EAFT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}